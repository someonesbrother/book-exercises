hours <- 35   # 35 hours were worked this week
pay_rate <- 12.00   # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
earnings
print(employee1_earnings)
# =====================================
# title: INFO 201 Functions Demo
# author: [INSERT YOUR NAME HERE]
# date: January 14, 2020
# =====================================
#
#   In this demo, we will cover:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
## Example 1. Earnings Calculator -----------------------------------------------
#
# We have the following R script
hours <- 35   # 35 hours were worked this week
pay_rate <- 12.00   # Pay rate was at Seattle minimum wage
earnings <- hours * pay_rate
earnings
# What if we wanted to do this for a 5 employees? what about for 50 employees?
# We could do it by hand but that is time consuming and error-prone.
# Instead, we can convert the above script into a function.
#
### 1.1 Defining Functions -------------------------------------------------------
#
# Defining function called 'calculate_earnings'
calculate_earnings <- function(hours, pay_rate) {
earnings <- hours * pay_rate
return(earnings)
}
#
# Here, we created a function called 'calculate_earnings()'.
# It takes two arguments, it multiplies the first argument 'hours' with the second argument 'pay_rate'.
#
# **Question 1.** Which line of code will the function returned?
#
# **Answer:** 31
#
# **Question 2.** The function didn't return anything -- why not?
#
# **Answer:** cos the function is not in use
#
### 1.2 Calling Functions
#
# We can call calculate_earnings() to calculate the earnings of employee 1 who worked 10 hours this week and earns $12/hr.
#
# Calling function 'calculate earnings' for employee 1
employee1_earnings <- calculate_earnings(10.0, 12.00)
print(employee1_earnings)
#
# We can call calculate_earnings() to calculate the earnings of employee 2 who worked 40 hours this week and earns $22/hr.
#
# Calling function 'calculate earnings' for employee 2
employee2_earnings <- calculate_earnings()
### 1.3 Reviewing Common Misconceptions -------------------------------------------
# **Question 3.** Think, pair, share - Why would the following function not work?
#
# ***Hint:*** The error message returned here is "unexpected numeric constant"
#
# **Answer:** ______________________________________
#
calculate_earnings <- function(10.0, 12.00) {
earnings <- hours * pay_rate
return(earnings)
}
# **Question 4.** Think, pair, share - Similarly, why would the following function not work?
#
# ***Hint:*** Error message returned is error in calculate_earnings(hours, pay_rate) : object 'hours' not found.
#
# **Answer:** ______________________________________
#
employee3_earnings <- calculate_earnings(hours, pay_rate)
print(employee3_earnings)
### 1.4 return() vs. print() ----------------------------------------------------------
#
# Now, what if I want to use the output that the function returns without having to use print() each time.
#
# Defining function called 'calculate_earnings_v2'
calculate_earnings_v2 <- function(hours, pay_rate) {
hours * pay_rate # You have to assign a returned value to a variable to use it
# printing a value is different from returning a value
}
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
## Example 2. Sentence Generator --------------------------------------------------------
#
# We can create a function to generate a sentence with the name of the last documentary you watched.
watch <- function() {
result <-
return(result)
}
current_show <- watch("")
print(current_show)
# Here, we created a function called 'watch()'.
# It takes one argument 'documentary' and attaches it to the end of the sentence "The last documentary that I watched is called".
#
# **Question 5.** What could be better in the following function?
#
# **Answer:** ______________________________________
watch <- function(Icarus) {
result <- print(paste("The last documentary I watched is called", Icarus))
return(result)
}
### 2.1 Functions with if-else statements
#
# Suppose we want a function that can classify your shows into either movies or tv-series based on its duration.
# For tv-series duration means the average run-time, in minutes, of an episode.
# The average movie duration is ~ 80 minutes.
# Using this information we can write the following function:
#
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print(" ")
}  else {
print(" ")
}
return(c(title, minutes))
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** ______________________________________
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
# END
print(employee1_earnings)
employee2_earnings <- calculate_earnings(40, 22.0)
print
print(employee2_earnings)
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [INSERT NAMES HERE]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
print(calculate_ratio(60, 12))
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
line <- paste("Hello", "I", "am", "a", year, "year," , "and", "my", "major", "is", major, ".")
return(line)
}
# Call intro() function
print(intro("second", "undeclared"))
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # ________
days_remaining <- as.Date(deadline) - as.Date(today)  # ________
return(days_remaining)  # ________
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
# END
# Call intro() function
print(intro("second", "undeclared"))
intro <- function(year, major) {
line <- paste("Hello", "I", "am", "a", year, "year," , "and", "my", "major", "is", major ".")
return(line)
}
line <- paste("Hello", "I", "am", "a", year, "year," , "and", "my", "major", "is", major + ".")
intro <- function(year, major) {
line <- paste("Hello", "I", "am", "a", year, "year," , "and", "my", "major", "is", major + ".")
return(line)
}
# Call intro() function
print(intro("second", "undeclared"))
watch <- function(Icarus) {
result <- print(paste("The last documentary I watched is called", Icarus))
return(result)
}
result <- print(paste("The last documentary I watched is called", Icarus))
print(watch(fuck))
print(watch("fuck"))
intro <- function(year, major) {
line <- paste("Hello I am a", year, "and my major is", major, ".")
return(line)
}
# Call intro() function
print(intro("second", "undeclared"))
days_to_deadline <- function(deadline, today) {  # create function with two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculates how many days left
return(days_remaining)  # returns days remaining
}
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14") #
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14") #
winter_finals_end <- print(days_to_deadline("2020-03-20", "2020-01-14")) #
july_fourth <- print(days_to_deadline("2020-07-04", "2020-01-14"))
greet <- paste("Hello I am a", year, "and my major is", major, sep = ".")
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "and my major is", major, sep = ".")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "and my major is", major, sep = ".")
return(greet)
}
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "and my major is", major, ".", sep = "")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major, ".", sep = " ")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
# Call intro() function
print(intro("second", "undeclared"))
greet <- paste("Hello I am a", year, "year, and my major is", major, ".", sep = ".")
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year, and my major is", major, ".", sep = ".")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is", major, ".", sep = "")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep = "")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [INSERT NAMES HERE]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
print(calculate_ratio(60, 12))
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep = "")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculates how many days left
return(days_remaining)  # returns days remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14") # 9
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14") # 66
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14") #172
# END
a2_days_left <- print(days_to_deadline("2020-01-23", "2020-01-14") # 9
a2_days_left <- print(days_to_deadline("2020-01-23", "2020-01-14") # 9
a2_days_left <- print(days_to_deadline("2020-01-23", "2020-01-14")) # 9
# =====================================
# title: "INFO 201 Lab 2 Exercises"
# author: [PETER LAM, Euan Canoy, Aaron Ng]
# date: "January 14, 2020"
# =====================================
#
#   In groups of three, you will now work on the following exercises where you will practice:
#
#   * Creating user-defined functions
#   * Calling user-defined functions
#
#  REPLACE ALL THE '____' WITH YOUR SOLUTIONS.
#
# # Exercise 1. Ratio Calculator -------------------------------------------
#
#  1. Define function 'calculate_ratio()' that takes x and divides it by y.
#  2. Create the variable 'ratio' and assign your calculation to it.
#  3. Return ratio variable.
#  4. Call calculate_ratio() with arguments 60 and 12.
#
# Define calculate_ratio() function
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
print(calculate_ratio(60, 12))
# Exercise 2. Introduction Generator ----------------------------------------
#
# 1. Define function 'intro()' that takes the following two arguments: year and major.
# 2. The function will return a character string of the format
#   "Hello I am a {YEAR} year, and my major is {MAJOR}." (replacing {YEAR} and {MAJOR} with the appropriate argument values).
# 3. Assign this character string to the variable 'greet'.
# 4. Return greet variable.
# 5. Call intro() function using your name and major as arguments.
#
#  Define intro() function
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, " year, and my major is ", major, ".", sep = "")
return(greet)
}
# Call intro() function
print(intro("second", "undeclared"))
# Bonus: Exercise 3. Days Counter --------------------------------------------
#
# 1. Write code comments for each line to describe what the function is doing.
#
days_to_deadline <- function(deadline, today) {  # create function with two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculates how many days left
return(days_remaining)  # returns days remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14") # 9
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14") # 66
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14") # 172
# END
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 0, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
add_three <- function(num) {
return (num + 3)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
imperial_to_metric <- function(feet, inch) {
return ((feet * 12 + inch) / 39.37)
}
height_in_meters <- imperial_to_metric(5, 9)
is_twice_as_long <- fuction(str1, str2) {
return (nchar(str1) >= nchar(str2) * 2 || nchar(str1) * 2 <= nchar(str2))
}
is_twice_as_long <- function(str1, str2) {
return (nchar(str1) >= nchar(str2) * 2 || nchar(str1) * 2 <= nchar(str2))
}
print(is_twice_as_long("wack", "wackwack"))
print(is_twice_as_long("how", "why"))
print(is_twice_as_long("bunbohue", "wack"))
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("peter", "joe")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
n.length()
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
add1(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(1:10))
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10:1))
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10, 1))
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
m - n
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, .1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
